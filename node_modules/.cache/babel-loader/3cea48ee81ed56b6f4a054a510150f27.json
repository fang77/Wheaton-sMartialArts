{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}(); // modules\n\n\nvar _delegate = require('delegate');\n\nvar _delegate2 = _interopRequireDefault(_delegate);\n\nvar _Cache = require('./modules/Cache');\n\nvar _Cache2 = _interopRequireDefault(_Cache);\n\nvar _loadPage = require('./modules/loadPage');\n\nvar _loadPage2 = _interopRequireDefault(_loadPage);\n\nvar _renderPage = require('./modules/renderPage');\n\nvar _renderPage2 = _interopRequireDefault(_renderPage);\n\nvar _triggerEvent = require('./modules/triggerEvent');\n\nvar _triggerEvent2 = _interopRequireDefault(_triggerEvent);\n\nvar _on = require('./modules/on');\n\nvar _on2 = _interopRequireDefault(_on);\n\nvar _off = require('./modules/off');\n\nvar _off2 = _interopRequireDefault(_off);\n\nvar _updateTransition = require('./modules/updateTransition');\n\nvar _updateTransition2 = _interopRequireDefault(_updateTransition);\n\nvar _getAnimationPromises = require('./modules/getAnimationPromises');\n\nvar _getAnimationPromises2 = _interopRequireDefault(_getAnimationPromises);\n\nvar _getPageData = require('./modules/getPageData');\n\nvar _getPageData2 = _interopRequireDefault(_getPageData);\n\nvar _plugins = require('./modules/plugins');\n\nvar _utils = require('./utils');\n\nvar _helpers = require('./helpers');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Swup = function () {\n  function Swup(setOptions) {\n    _classCallCheck(this, Swup); // default options\n\n\n    var defaults = {\n      animateHistoryBrowsing: false,\n      animationSelector: '[class*=\"transition-\"]',\n      linkSelector: 'a[href^=\"' + window.location.origin + '\"]:not([data-no-swup]), a[href^=\"/\"]:not([data-no-swup]), a[href^=\"#\"]:not([data-no-swup])',\n      cache: true,\n      containers: ['#swup'],\n      requestHeaders: {\n        'X-Requested-With': 'swup',\n        Accept: 'text/html, application/xhtml+xml'\n      },\n      plugins: [],\n      skipPopStateHandling: function skipPopStateHandling(event) {\n        return !(event.state && event.state.source === 'swup');\n      }\n    }; // merge options\n\n    var options = _extends({}, defaults, setOptions); // handler arrays\n\n\n    this._handlers = {\n      animationInDone: [],\n      animationInStart: [],\n      animationOutDone: [],\n      animationOutStart: [],\n      animationSkipped: [],\n      clickLink: [],\n      contentReplaced: [],\n      disabled: [],\n      enabled: [],\n      openPageInNewTab: [],\n      pageLoaded: [],\n      pageRetrievedFromCache: [],\n      pageView: [],\n      popState: [],\n      samePage: [],\n      samePageWithHash: [],\n      serverError: [],\n      transitionStart: [],\n      transitionEnd: [],\n      willReplaceContent: []\n    }; // variable for id of element to scroll to after render\n\n    this.scrollToElement = null; // variable for promise used for preload, so no new loading of the same page starts while page is loading\n\n    this.preloadPromise = null; // variable for save options\n\n    this.options = options; // variable for plugins array\n\n    this.plugins = []; // variable for current transition object\n\n    this.transition = {}; // variable for keeping event listeners from \"delegate\"\n\n    this.delegatedListeners = {}; // make modules accessible in instance\n\n    this.cache = new _Cache2.default();\n    this.cache.swup = this;\n    this.loadPage = _loadPage2.default;\n    this.renderPage = _renderPage2.default;\n    this.triggerEvent = _triggerEvent2.default;\n    this.on = _on2.default;\n    this.off = _off2.default;\n    this.updateTransition = _updateTransition2.default;\n    this.getAnimationPromises = _getAnimationPromises2.default;\n    this.getPageData = _getPageData2.default;\n\n    this.log = function () {}; // here so it can be used by plugins\n\n\n    this.use = _plugins.use;\n    this.unuse = _plugins.unuse;\n    this.findPlugin = _plugins.findPlugin; // enable swup\n\n    this.enable();\n  }\n\n  _createClass(Swup, [{\n    key: 'enable',\n    value: function enable() {\n      var _this = this; // check for Promise support\n\n\n      if (typeof Promise === 'undefined') {\n        console.warn('Promise is not supported');\n        return;\n      } // add event listeners\n\n\n      this.delegatedListeners.click = (0, _delegate2.default)(document, this.options.linkSelector, 'click', this.linkClickHandler.bind(this));\n      window.addEventListener('popstate', this.popStateHandler.bind(this)); // initial save to cache\n\n      var page = (0, _helpers.getDataFromHtml)(document.documentElement.outerHTML, this.options.containers);\n      page.url = page.responseURL = (0, _helpers.getCurrentUrl)();\n\n      if (this.options.cache) {\n        this.cache.cacheUrl(page);\n      } // mark swup blocks in html\n\n\n      (0, _helpers.markSwupElements)(document.documentElement, this.options.containers); // mount plugins\n\n      this.options.plugins.forEach(function (plugin) {\n        _this.use(plugin);\n      }); // modify initial history record\n\n      window.history.replaceState(Object.assign({}, window.history.state, {\n        url: window.location.href,\n        random: Math.random(),\n        source: 'swup'\n      }), document.title, window.location.href); // trigger enabled event\n\n      this.triggerEvent('enabled'); // add swup-enabled class to html tag\n\n      document.documentElement.classList.add('swup-enabled'); // trigger page view event\n\n      this.triggerEvent('pageView');\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      var _this2 = this; // remove delegated listeners\n\n\n      this.delegatedListeners.click.destroy();\n      this.delegatedListeners.mouseover.destroy(); // remove popstate listener\n\n      window.removeEventListener('popstate', this.popStateHandler.bind(this)); // empty cache\n\n      this.cache.empty(); // unmount plugins\n\n      this.options.plugins.forEach(function (plugin) {\n        _this2.unuse(plugin);\n      }); // remove swup data atributes from blocks\n\n      (0, _utils.queryAll)('[data-swup]').forEach(function (element) {\n        element.removeAttribute('data-swup');\n      }); // remove handlers\n\n      this.off(); // trigger disable event\n\n      this.triggerEvent('disabled'); // remove swup-enabled class from html tag\n\n      document.documentElement.classList.remove('swup-enabled');\n    }\n  }, {\n    key: 'linkClickHandler',\n    value: function linkClickHandler(event) {\n      // no control key pressed\n      if (!event.metaKey && !event.ctrlKey && !event.shiftKey && !event.altKey) {\n        // index of pressed button needs to be checked because Firefox triggers click on all mouse buttons\n        if (event.button === 0) {\n          this.triggerEvent('clickLink', event);\n          event.preventDefault();\n          var link = new _helpers.Link(event.delegateTarget);\n\n          if (link.getAddress() == (0, _helpers.getCurrentUrl)() || link.getAddress() == '') {\n            // link to the same URL\n            if (link.getHash() != '') {\n              // link to the same URL with hash\n              this.triggerEvent('samePageWithHash', event);\n              var element = document.querySelector(link.getHash());\n\n              if (element != null) {\n                history.replaceState({\n                  url: link.getAddress() + link.getHash(),\n                  random: Math.random(),\n                  source: 'swup'\n                }, document.title, link.getAddress() + link.getHash());\n              } else {\n                // referenced element not found\n                console.warn('Element for offset not found (' + link.getHash() + ')');\n              }\n            } else {\n              // link to the same URL without hash\n              this.triggerEvent('samePage', event);\n            }\n          } else {\n            // link to different url\n            if (link.getHash() != '') {\n              this.scrollToElement = link.getHash();\n            } // get custom transition from data\n\n\n            var customTransition = event.delegateTarget.getAttribute('data-swup-transition'); // load page\n\n            this.loadPage({\n              url: link.getAddress(),\n              customTransition: customTransition\n            }, false);\n          }\n        }\n      } else {\n        // open in new tab (do nothing)\n        this.triggerEvent('openPageInNewTab', event);\n      }\n    }\n  }, {\n    key: 'popStateHandler',\n    value: function popStateHandler(event) {\n      if (this.options.skipPopStateHandling(event)) return;\n      var link = new _helpers.Link(event.state ? event.state.url : window.location.pathname);\n\n      if (link.getHash() !== '') {\n        this.scrollToElement = link.getHash();\n      } else {\n        event.preventDefault();\n      }\n\n      this.triggerEvent('popState', event);\n      this.loadPage({\n        url: link.getAddress()\n      }, event);\n    }\n  }]);\n\n  return Swup;\n}();\n\nexports.default = Swup;","map":null,"metadata":{},"sourceType":"script"}