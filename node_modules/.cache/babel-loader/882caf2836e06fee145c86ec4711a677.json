{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _utils = require('../utils');\n\nvar _helpers = require('../helpers');\n\nvar renderPage = function renderPage(page, popstate) {\n  var _this = this;\n\n  document.documentElement.classList.remove('is-leaving'); // replace state in case the url was redirected\n\n  var link = new _helpers.Link(page.responseURL);\n\n  if (window.location.pathname !== link.getPath()) {\n    window.history.replaceState({\n      url: link.getPath(),\n      random: Math.random(),\n      source: 'swup'\n    }, document.title, link.getPath()); // save new record for redirected url\n\n    this.cache.cacheUrl(_extends({}, page, {\n      url: link.getPath()\n    }));\n  } // only add for non-popstate transitions\n\n\n  if (!popstate || this.options.animateHistoryBrowsing) {\n    document.documentElement.classList.add('is-rendering');\n  }\n\n  this.triggerEvent('willReplaceContent', popstate); // replace blocks\n\n  for (var i = 0; i < page.blocks.length; i++) {\n    document.body.querySelector('[data-swup=\"' + i + '\"]').outerHTML = page.blocks[i];\n  } // set title\n\n\n  document.title = page.title;\n  this.triggerEvent('contentReplaced', popstate);\n  this.triggerEvent('pageView', popstate); // empty cache if it's disabled (because pages could be preloaded and stuff)\n\n  if (!this.options.cache) {\n    this.cache.empty();\n  } // start animation IN\n\n\n  setTimeout(function () {\n    if (!popstate || _this.options.animateHistoryBrowsing) {\n      _this.triggerEvent('animationInStart');\n\n      document.documentElement.classList.remove('is-animating');\n    }\n  }, 10); // handle end of animation\n\n  var animationPromises = this.getAnimationPromises('in');\n\n  if (!popstate || this.options.animateHistoryBrowsing) {\n    Promise.all(animationPromises).then(function () {\n      _this.triggerEvent('animationInDone');\n\n      _this.triggerEvent('transitionEnd', popstate); // remove \"to-{page}\" classes\n\n\n      document.documentElement.className.split(' ').forEach(function (classItem) {\n        if (new RegExp('^to-').test(classItem) || classItem === 'is-changing' || classItem === 'is-rendering' || classItem === 'is-popstate') {\n          document.documentElement.classList.remove(classItem);\n        }\n      });\n    });\n  } else {\n    this.triggerEvent('transitionEnd', popstate);\n  } // reset scroll-to element\n\n\n  this.scrollToElement = null;\n};\n\nexports.default = renderPage;","map":null,"metadata":{},"sourceType":"script"}