/// <reference types="react" />
import { ForwardRefExoticComponent, CSSProperties } from 'react';
import { ElementType, ComponentPropsWithRef, SpringValue } from '@react-spring/shared';
export * from '@react-spring/core';

/// <reference types="react" />
declare type JSXElements = keyof JSX.IntrinsicElements;

declare type DOMComponents = {
    [Tag in JSXElements]: AnimatedComponent<Tag>;
};
declare type CreateAnimated = <T extends ElementType>(wrappedComponent: T) => AnimatedComponent<T>;
declare const animated: CreateAnimated & DOMComponents;
/** The type of an `animated()` component */
declare type AnimatedComponent<T extends ElementType> = ForwardRefExoticComponent<AnimatedProps<ComponentPropsWithRef<T>> & {
    scrollTop?: SpringValue<number> | number;
    scrollLeft?: SpringValue<number> | number;
}>;
/** The props of an `animated()` component */
declare type AnimatedProps<Props extends object> = {
    [P in keyof Props]: (P extends 'ref' | 'key' ? Props[P] : AnimatedProp<Props[P]>);
};
declare type CSSPropertyNames = keyof CSSProperties;
declare type CSSValidProperties<T extends object> = {
    [P in keyof T & CSSPropertyNames]: T[P] extends CSSProperties[P] ? P : never;
}[keyof T & CSSPropertyNames];
declare type AnimatedProp<T> = [T, T] extends [infer T, infer DT] ? [DT] extends [never] ? never : DT extends void ? undefined : DT extends object ? [CSSValidProperties<DT>] extends [never] ? DT extends ReadonlyArray<any> ? AnimatedStyles<DT> : DT : AnimatedStyle<T> : DT | AnimatedLeaf<T> : never;
declare type AnimatedStyles<T extends ReadonlyArray<any>> = {
    [P in keyof T]: [T[P]] extends [infer DT] ? DT extends object ? [CSSValidProperties<DT>] extends [never] ? DT extends ReadonlyArray<any> ? AnimatedStyles<DT> : DT : {
        [P in keyof DT]: AnimatedProp<DT[P]>;
    } : DT : never;
};
declare type AnimatedStyle<T> = [T, T] extends [infer T, infer DT] ? DT extends void ? undefined : [DT] extends [never] ? never : DT extends object ? {
    [P in keyof DT]: AnimatedStyle<DT[P]>;
} : DT | AnimatedLeaf<T> : never;
declare type AnimatedLeaf<T> = [T] extends [object] ? never : SpringValue<Exclude<T, object | void>>;

export { AnimatedComponent, AnimatedProps, animated as a, animated };
